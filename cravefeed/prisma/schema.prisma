generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usera {
  id             Int        @id @default(autoincrement())
  email          String     @unique
  username       String     @unique
  password       String
  profilepicture String?
  bio            String?
  Posts          Post[]
  Likes          Like[]
  Comments       Comment[]
  Followers      Follower[] @relation("follower")
  Following      Follower[] @relation("following")
}

model Post {
  id          Int           @id @default(autoincrement())
  Usera       Usera         @relation(fields: [userId], references: [id])
  userId      Int
  restuarant  String
  dish        String
  city        String
  caption     String?
  image       String?
  Location    String?
  likeCount   Int           @default(0)
  Likes       Like[]
  Comments    Comment[]
  Leaderboard Leaderboard[]
}

model Follower {
  id            Int   @id @default(autoincrement())
  followerId    Int // Foreign key referencing Usera table
  followingId   Int // Foreign key referencing Usera table
  Usera         Usera @relation("follower", fields: [followerId], references: [id])
  FollowingUser Usera @relation("following", fields: [followingId], references: [id])
}

model Like {
  id     Int   @id @default(autoincrement())
  userId Int // Foreign key referencing Usera table
  postId Int // Foreign key referencing Post table
  Usera  Usera @relation(fields: [userId], references: [id])
  Post   Post  @relation(fields: [postId], references: [id])
}

model Comment {
  id     Int    @id @default(autoincrement())
  userId Int // Foreign key referencing Usera table
  postId Int // Foreign key referencing Post table
  text   String
  Usera  Usera  @relation(fields: [userId], references: [id])
  Post   Post   @relation(fields: [postId], references: [id])
}

model Leaderboard {
  id     Int  @id @default(autoincrement())
  postId Int // Foreign key referencing Post table
  score  Int
  Post   Post @relation(fields: [postId], references: [id])
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
